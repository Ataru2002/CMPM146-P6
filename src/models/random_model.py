from models.model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam
import numpy as np

class RandomModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        #load model
        self.model = Model.load_model("./results/basic_model_10_epochs_timestamp_1708596083.keras").model

        
        # very similar to transfered_model.py, the only difference is that you should randomize the weights
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        for instances in self.model.layers:
            instances.trainable = False
        
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # randomize the weights of the loaded model, possibly by using _randomize_layers
        # use this model by removing the last layer, adding dense layers and an output layer
        self.model.pop()
        
        self._randomize_layers(self.model)
        
        #adding dense layers and an output layer
        dense_layer = layers.Dense(8, activation='relu')
        output_layer = layers.Dense(categories_count, activation='softmax')
        self.model.add(dense_layer)
        self.model.add(output_layer)

    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        self.model.compile(
            optimizer = RMSprop(learning_rate = 0.001),
            loss = 'categorical_crossentropy',
            metrics = ['accuracy'],
        )

    @staticmethod
    def _randomize_layers(model):
        # Your code goes here

        # you can write a function here to set the weights to a random value
        # use this function in _define_model to randomize the weights of your loaded model
        for layer in model.layers:
            weight = layer.get_weights()
            weight = [np.random.standard_normal(w.shape) for w in weight]
            layer.set_weights(weight)
        return model
